// @generated
// This file is @generated by prost-build.
/// ╔═══════════════════════════════════════════════════════════╗
///                             EVENTS
/// ╚═══════════════════════════════════════════════════════════╝
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    /// ────────────────────── Order-Level Events ──────────────────────
    #[prost(message, repeated, tag="1")]
    pub cancel_order: ::prost::alloc::vec::Vec<CancelOrder>,
    #[prost(message, repeated, tag="2")]
    pub create_order: ::prost::alloc::vec::Vec<CreateOrder>,
    #[prost(message, repeated, tag="3")]
    pub fill_order: ::prost::alloc::vec::Vec<FillOrder>,
    /// ───────────────────── Pause / Circuit-Breaker ──────────────────
    #[prost(message, repeated, tag="4")]
    pub pause_create: ::prost::alloc::vec::Vec<PauseCreate>,
    #[prost(message, repeated, tag="5")]
    pub pause_fill: ::prost::alloc::vec::Vec<PauseFill>,
    /// ─────────────── Strategy & Protocol Configuration ──────────────
    #[prost(message, repeated, tag="6")]
    pub set_execution_varience: ::prost::alloc::vec::Vec<SetExecutionVarience>,
    #[prost(message, repeated, tag="7")]
    pub set_fee_collector: ::prost::alloc::vec::Vec<SetFeeCollector>,
    #[prost(message, repeated, tag="8")]
    pub set_max_feed_age_fill_order: ::prost::alloc::vec::Vec<SetMaxFeedAgeFillOrder>,
    #[prost(message, repeated, tag="9")]
    pub set_max_feed_age_create_order: ::prost::alloc::vec::Vec<SetMaxFeedAgeCreateOrder>,
    #[prost(message, repeated, tag="10")]
    pub set_max_scaling_factor: ::prost::alloc::vec::Vec<SetMaxScalingFactor>,
    #[prost(message, repeated, tag="11")]
    pub set_max_slippage: ::prost::alloc::vec::Vec<SetMaxSlippage>,
    #[prost(message, repeated, tag="12")]
    pub set_min_execution_value: ::prost::alloc::vec::Vec<SetMinExecutionValue>,
    #[prost(message, repeated, tag="13")]
    pub set_min_order_frequency_interval: ::prost::alloc::vec::Vec<SetMinOrderFrequencyInterval>,
    #[prost(message, repeated, tag="14")]
    pub set_min_slippage: ::prost::alloc::vec::Vec<SetMinSlippage>,
    #[prost(message, repeated, tag="15")]
    pub set_yield_split: ::prost::alloc::vec::Vec<SetYieldSplit>,
    #[prost(message, repeated, tag="16")]
    pub set_protocol_fee: ::prost::alloc::vec::Vec<SetProtocolFee>,
    /// ─────────────────────── Token-Specific Events ───────────────────
    #[prost(message, repeated, tag="17")]
    pub set_token_props: ::prost::alloc::vec::Vec<SetTokenProps>,
    #[prost(message, repeated, tag="18")]
    pub set_token_state: ::prost::alloc::vec::Vec<SetTokenState>,
    /// ────────────── Role-Based Access-Control (RBAC) ────────────────
    #[prost(message, repeated, tag="19")]
    pub role_admin_changed: ::prost::alloc::vec::Vec<RoleAdminChanged>,
    #[prost(message, repeated, tag="20")]
    pub role_granted: ::prost::alloc::vec::Vec<RoleGranted>,
    #[prost(message, repeated, tag="21")]
    pub role_revoked: ::prost::alloc::vec::Vec<RoleRevoked>,
    /// ────────────── External Integrations & Adapters ────────────────
    #[prost(message, repeated, tag="22")]
    pub set_aave_pool: ::prost::alloc::vec::Vec<SetAavePool>,
}
/// ╔═══════════════════════════════════════════════════════════╗
///                         ORDER-LEVEL EVENTS
/// ╚═══════════════════════════════════════════════════════════╝
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelOrder {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint256
    #[prost(string, tag="5")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="6")]
    pub vault: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateOrder {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint256
    #[prost(string, tag="5")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="6")]
    pub creator: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub recipient: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="8")]
    pub token_in: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="9")]
    pub token_out: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="10")]
    pub spend_amount: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="11")]
    pub repeats: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="12")]
    pub slippage: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="13")]
    pub freq_interval: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="14")]
    pub scaling_interval: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="15")]
    pub last_run: ::prost::alloc::string::String,
    #[prost(string, tag="16")]
    pub protocol_fee: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="17")]
    pub vault: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag="18")]
    pub stake_asset_in: bool,
    #[prost(bool, tag="19")]
    pub stake_asset_out: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FillOrder {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint256
    #[prost(string, tag="5")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="6")]
    pub recipient: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="7")]
    pub fill_amount: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="8")]
    pub amount_of_token_out: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub protocol_fee: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="10")]
    pub token_in_price: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="11")]
    pub token_out_price: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="12")]
    pub scaling_factor: ::prost::alloc::string::String,
}
/// ╔═══════════════════════════════════════════════════════════╗
///                    PAUSE / CIRCUIT-BREAKER EVENTS
/// ╚═══════════════════════════════════════════════════════════╝
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PauseCreate {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(bool, tag="5")]
    pub is_paused: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PauseFill {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(bool, tag="5")]
    pub is_paused: bool,
}
/// ╔═══════════════════════════════════════════════════════════╗
///            STRATEGY & PROTOCOL CONFIGURATION EVENTS
/// ╚═══════════════════════════════════════════════════════════╝
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetExecutionVarience {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint256
    #[prost(string, tag="5")]
    pub execution_varience: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetFeeCollector {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(bytes="vec", tag="5")]
    pub fee_collector: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetMaxFeedAgeFillOrder {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint256
    #[prost(string, tag="5")]
    pub max_feed_age: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetMaxFeedAgeCreateOrder {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint256
    #[prost(string, tag="5")]
    pub max_feed_age: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetMaxScalingFactor {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint256
    #[prost(string, tag="5")]
    pub max_scaling_factor: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetMaxSlippage {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint256
    #[prost(string, tag="5")]
    pub slippage_max: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetMinExecutionValue {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint256
    #[prost(string, tag="5")]
    pub min_execution_value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetMinOrderFrequencyInterval {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint256
    #[prost(string, tag="5")]
    pub min_order_frequency_interval: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetMinSlippage {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint256
    #[prost(string, tag="5")]
    pub slippage_min: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetYieldSplit {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint256
    #[prost(string, tag="5")]
    pub yield_split: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetProtocolFee {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(string, tag="5")]
    pub protocol_fee: ::prost::alloc::string::String,
}
/// ╔═══════════════════════════════════════════════════════════╗
///                         TOKEN CONFIGURATION
/// ╚═══════════════════════════════════════════════════════════╝
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetTokenProps {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(bytes="vec", tag="5")]
    pub token: ::prost::alloc::vec::Vec<u8>,
    /// bytes32
    #[prost(bytes="vec", tag="6")]
    pub feed: ::prost::alloc::vec::Vec<u8>,
    /// uint8
    #[prost(uint64, tag="7")]
    pub token_decimals: u64,
    #[prost(string, tag="8")]
    pub token_symbol: ::prost::alloc::string::String,
    #[prost(string, tag="9")]
    pub token_name: ::prost::alloc::string::String,
    #[prost(bool, tag="10")]
    pub is_active: bool,
    #[prost(bool, tag="11")]
    pub is_stakable: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetTokenState {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(bytes="vec", tag="5")]
    pub token: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag="6")]
    pub is_active: bool,
}
/// ╔═══════════════════════════════════════════════════════════╗
///              ROLE-BASED ACCESS-CONTROL (RBAC) EVENTS
/// ╚═══════════════════════════════════════════════════════════╝
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoleAdminChanged {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// bytes32
    #[prost(bytes="vec", tag="5")]
    pub role: ::prost::alloc::vec::Vec<u8>,
    /// bytes32
    #[prost(bytes="vec", tag="6")]
    pub previous_admin_role: ::prost::alloc::vec::Vec<u8>,
    /// bytes32
    #[prost(bytes="vec", tag="7")]
    pub new_admin_role: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoleGranted {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// bytes32
    #[prost(bytes="vec", tag="5")]
    pub role: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub account: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoleRevoked {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// bytes32
    #[prost(bytes="vec", tag="5")]
    pub role: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="6")]
    pub account: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
}
/// ╔═══════════════════════════════════════════════════════════╗
///             EXTERNAL INTEGRATIONS & ADAPTER CONFIGS
/// ╚═══════════════════════════════════════════════════════════╝
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetAavePool {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(bytes="vec", tag="5")]
    pub aave_pool: ::prost::alloc::vec::Vec<u8>,
}
// @@protoc_insertion_point(module)
