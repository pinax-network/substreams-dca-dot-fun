// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub fill_orders: ::prost::alloc::vec::Vec<FillOrder>,
    #[prost(message, repeated, tag="2")]
    pub create_orders: ::prost::alloc::vec::Vec<CreateOrder>,
    #[prost(message, repeated, tag="3")]
    pub cancel_orders: ::prost::alloc::vec::Vec<CancelOrder>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FillOrder {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(string, tag="5")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="6")]
    pub recipient: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="7")]
    pub fill_amount: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="8")]
    pub amount_of_token_out: ::prost::alloc::string::String,
    #[prost(uint64, tag="9")]
    pub protocol_fee: u64,
    /// uint256
    #[prost(string, tag="10")]
    pub token_in_price: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="11")]
    pub token_out_price: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="12")]
    pub scaling_factor: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateOrder {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(string, tag="5")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="6")]
    pub creator: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="7")]
    pub recipient: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="8")]
    pub token_in: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="9")]
    pub token_out: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="10")]
    pub spend_amount: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="11")]
    pub repeats: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="12")]
    pub slippage: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="13")]
    pub freq_interval: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="14")]
    pub scaling_interval: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="15")]
    pub last_run: ::prost::alloc::string::String,
    #[prost(uint64, tag="16")]
    pub protocol_fee: u64,
    #[prost(bytes="vec", tag="17")]
    pub vault: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag="18")]
    pub stake_asset_in: bool,
    #[prost(bool, tag="19")]
    pub stake_asset_out: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelOrder {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(string, tag="5")]
    pub order_id: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="6")]
    pub vault: ::prost::alloc::vec::Vec<u8>,
}
// @@protoc_insertion_point(module)
